apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-crash'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId 'com.github.ayltai.newspaper'
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName '1.0.0'

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            storeFile file('../key-store.jks')
            keyAlias System.getenv('ANDROID_KEY_ALIAS')
            storePassword System.getenv('ANDROID_STORE_PASSWORD')
            keyPassword System.getenv('ANDROID_KEY_PASSWORD')
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        preDexLibraries false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

checkstyle {
    configFile rootProject.file('checkstyle.xml')
    showViolations true
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Android
    compile 'com.android.support:support-annotations:+'
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.android.support:support-compat:+'
    compile 'com.android.support:support-v13:+'
    compile 'com.android.support:design:+'
    compile 'com.android.support:recyclerview-v7:+'
    compile 'com.android.support:cardview-v7:+'
    compile 'com.android.support:preference-v7:+'
    compile 'com.android.support:preference-v14:+'
    compile 'com.android.support:support-core-utils:+'

    // Firebase
    compile 'com.google.firebase:firebase-core:10.0.1'
    compile 'com.google.firebase:firebase-crash:10.0.1'
    compile 'com.google.firebase:firebase-config:10.0.1'
    compile 'com.google.firebase:firebase-invites:10.0.1'

    // ReactiveX
    compile 'io.reactivex:rxjava:+'
    compile 'io.reactivex:rxandroid:+'
    compile 'com.jakewharton.rxbinding:rxbinding:+'

    // Flow by Square
    compile 'com.squareup.flow:flow:+'

    // Networking
    compile 'com.squareup.okhttp3:okhttp:+'

    // Database
    compile 'io.realm:android-adapters:+'

    // Image processing
    compile 'com.facebook.fresco:fresco:+'
    compile ('com.github.stfalcon:frescoimageviewer:+') {
        exclude group: 'com.facebook.fresco', module: 'fresco'
    }
    compile ('com.github.aryarohit07:fresco-facedetection-processor:+') {
        exclude group: 'com.google.android.gms', module: 'play-services-vision'
        exclude group: 'com.facebook.fresco', module: 'fresco'
    }
    compile 'com.google.android.gms:play-services-vision:10.0.1'

    // Eye candies
    compile 'hanks.xyz:smallbang-library:+'
    compile 'com.github.javiersantos:MaterialStyledDialogs:+'

    // LeakCanary
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

    // Tests
    testCompile 'junit:junit:+'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile ('org.powermock:powermock-api-mockito:1.+') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testCompile ('org.powermock:powermock-module-junit4:1.+') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }

    androidTestCompile('com.android.support.test.espresso:espresso-core:+', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

task customFindbugs(type: FindBugs) {
    ignoreFailures = false
    effort = "max"
    reportLevel = "medium"
    classes = files("$project.buildDir/intermediates/classes")

    // Use this only if you want exclude some errors
    excludeFilter = file("$rootProject.rootDir/findbugs-android-exclude.xml")

    source = fileTree('src/main/java/')
    classpath = files()

    reports {
        xml.enabled = false
        xml.withMessages = true
        html.enabled = true
        xml.destination "$project.buildDir/outputs/findbugs/findbugs-output.xml"
        html.destination "$project.buildDir/outputs/findbugs/findbugs-output.html"
    }
}

build.dependsOn customFindbugs

apply plugin: 'com.google.gms.google-services'
